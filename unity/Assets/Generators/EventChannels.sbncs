{{
  unity.clear
  include "./Utils/LoadEvents.sbncs"
  unity.log events
}}

{{ capture output }}
/// <auto-generated />

using System;
using UnityEngine;

{{ for event in events }}
{{
}}
{{ if event.namespace != null }}
namespace {{ event.namespace }} {
{{ end }}

    public class {{ event.name }}Channel : Event<{{ event.name }}>
    {
        {{ if event.constructors == empty }}
        public void Fire()
        {
            this.Dispatch(new {{ event.full_name }}());
        }

        public void FireAt(UnityEngine.Vector3 position)
        {
            this.Dispatch(new {{ event.full_name }}(), position);
        }
        {{ else }}
          {{ for constructor in event.constructors }}
        public void Fire({{- for param in constructor.parameters -}}
          {{ unity.log(param.type.full_name) }}
          {{ param.type.name }} {{ param.name }}
          {{- if !for.last }}, {{ end -}}
          {{ end -}})
        {
            this.Dispatch(new {{ event.full_name }}({{- for param in constructor.parameters -}}
              {{ param.type.name }}
              {{- if !for.last }}, {{ end -}}
              {{ end -}}));
        }

        public void FireAt({{- for param in constructor.parameters -}}
          {{ param.type.full_name }} {{ param.name }}
          {{- if !for.last }}, {{ end -}}
          {{ end -}}{{- if constructor.parameters != empty }}, {{ end -}}UnityEngine.Vector3 __position)
        {
            this.Dispatch(new {{ event.full_name }}({{- for param in constructor.parameters -}}
              {{ param.name }}
              {{- if !for.last }}, {{ end -}}
              {{ end -}}), __position);
        }

          {{ end }}
        {{ end }}
    }
  {{ if event.namespace != null }}
}
  {{ end }}
{{ end }}

namespace MyProject.Events
{
    public static partial class Channel
    {
{{ for event in events }}
        public static {{ event.full_name }}Channel {{ event.name }} { get; private set; }
{{ end }}

        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
        private static void Reset()
        {
{{ for event in events }}
            {{ event.name }} = new {{ event.full_name }}Channel();
{{ end }}
        }
    }
}

namespace MyProject.Events
{
    public static partial class Channel
    {
    }
}

{{
  end
}}


{{ file.write "../Scripts/Events/Channels/Channel.cs" csharp.format(output) }}
