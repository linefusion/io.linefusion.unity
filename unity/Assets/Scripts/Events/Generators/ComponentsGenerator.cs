#if SOURCE_GENERATOR

{{-
func get_attr(type, name)
  for attr in type.Attributes
    if attr.FullName == name
      ret attr
    end
  end
  ret null 
end 

func get_events()
  $events = []
  for struct in data.Structs
    attr = get_attr struct "MyProject.Events.EventAttribute"
    if attr == null
      continue
    end
    $events = Array.Add $events struct
  end
  ret $events | Array.Sort "FullName"
end

events = get_events
-}}
{{~ for event in events ~}}
  {{~ capture output ~}}
/// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Events;

    {{~ if event.Namespace != null ~}}
namespace {{ event.Namespace }}
{
    {{~ end ~}}
    public class {{ event.Name }}Listener : MonoBehaviour
    {       
        public UnityEvent<{{ event.Name }}> on{{ event.Name }} = new();

        public void OnEnable()
        {
            Channel.{{ event.Name }}.Fired += OnTrigger;
        }

        public void OnDisable()
        {
            Channel.{{ event.Name }}.Fired -= OnTrigger;
        }

        private void OnTrigger(Event<{{ event.FullName }}>.Args args)
        {
            on{{ event.Name }}.Invoke(args.Data);
        }
    }

    {{~ if event.Namespace != null ~}}
}
    {{~ end ~}}
  {{~ end ~}}
  {{~ Save(output, "../Components/" + event.Name + "Listener.cs") ~}}
{{~ end -}}


{{~ for event in events ~}}
  {{~ capture output ~}}
/// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Events;

    {{~ if event.Namespace != null ~}}
namespace {{ event.Namespace }}
{
    {{~ end ~}}
    public class {{ event.Name }}Trigger : MonoBehaviour
    {
        {{~ if event.Constructors == empty ~}}
        public void Fire()
        {
            Channel.{{ event.Name }}.Dispatch(new {{ event.FullName }}());
        }
        
        public void FireAt(UnityEngine.Vector3 position)
        {
            Channel.{{ event.Name }}.Dispatch(new {{ event.FullName }}(), position);
        }
        {{~ else ~}}
          {{~ for constructor in event.Constructors ~}}
        public void Fire({{- for param in constructor.Parameters -}}
          {{ param.Type.FullName }} {{ param.Name }}
          {{- if !for.last }}, {{ end -}}
          {{~ end -}})
        {
            Channel.{{ event.Name }}.Dispatch(new {{ event.FullName }}({{- for param in constructor.Parameters -}}
              {{ param.Name }}
              {{- if !for.last }}, {{ end -}}
              {{~ end -}}));
        }
        
        public void FireAt({{- for param in constructor.Parameters -}}
          {{ param.Type.FullName }} {{ param.Name }}
          {{- if !for.last }}, {{ end -}}
          {{~ end -}}{{- if constructor.Parameters != empty }}, {{ end -}}UnityEngine.Vector3 __position)
        {
            Channel.{{ event.Name }}.Dispatch(new {{ event.FullName }}({{- for param in constructor.Parameters -}}
              {{ param.Name }}
              {{- if !for.last }}, {{ end -}}
              {{~ end -}}), __position);
        }

          {{~ end ~}}
        {{~ end ~}}
    }

    {{~ if event.Namespace != null ~}}
}
    {{~ end ~}}
  {{~ end ~}}
  {{~ Save(output, "../Components/" + event.Name + "Trigger.cs") ~}}
{{~ end -}}
#endif

