/// <auto-generated/>
using System;
using UnityEngine;
using UnityEngine.Events;
using MyProject.Events;

namespace MyProject.Managers
{
    public partial class AudioManager
    {
        [SerializeField]
        private AudioSource[] onBulletHitSound;
        private void OnBulletHit(Event<MyProject.Events.BulletHit>.Args args)
        {
            var source = onBulletHitSound[UnityEngine.Random.Range(0, onBulletHitSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onBulletMissedSound;
        private void OnBulletMissed(Event<MyProject.Events.BulletMissed>.Args args)
        {
            var source = onBulletMissedSound[UnityEngine.Random.Range(0, onBulletMissedSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onBulletSpawnedSound;
        private void OnBulletSpawned(Event<MyProject.Events.BulletSpawned>.Args args)
        {
            var source = onBulletSpawnedSound[UnityEngine.Random.Range(0, onBulletSpawnedSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onChatMessageReceivedSound;
        private void OnChatMessageReceived(Event<MyProject.Events.ChatMessageReceived>.Args args)
        {
            var source = onChatMessageReceivedSound[UnityEngine.Random.Range(0, onChatMessageReceivedSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onGameScoreSound;
        private void OnGameScore(Event<MyProject.Events.GameScore>.Args args)
        {
            var source = onGameScoreSound[UnityEngine.Random.Range(0, onGameScoreSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onGameStartedSound;
        private void OnGameStarted(Event<MyProject.Events.GameStarted>.Args args)
        {
            var source = onGameStartedSound[UnityEngine.Random.Range(0, onGameStartedSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onPlayerDiedSound;
        private void OnPlayerDied(Event<MyProject.Events.PlayerDied>.Args args)
        {
            var source = onPlayerDiedSound[UnityEngine.Random.Range(0, onPlayerDiedSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onPlayerHealthSound;
        private void OnPlayerHealth(Event<MyProject.Events.PlayerHealth>.Args args)
        {
            var source = onPlayerHealthSound[UnityEngine.Random.Range(0, onPlayerHealthSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onPlayerHitSound;
        private void OnPlayerHit(Event<MyProject.Events.PlayerHit>.Args args)
        {
            var source = onPlayerHitSound[UnityEngine.Random.Range(0, onPlayerHitSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onPlayerMoveInputSound;
        private void OnPlayerMoveInput(Event<MyProject.Events.PlayerMoveInput>.Args args)
        {
            var source = onPlayerMoveInputSound[UnityEngine.Random.Range(0, onPlayerMoveInputSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        [SerializeField]
        private AudioSource[] onPlayerSpawnedSound;
        private void OnPlayerSpawned(Event<MyProject.Events.PlayerSpawned>.Args args)
        {
            var source = onPlayerSpawnedSound[UnityEngine.Random.Range(0, onPlayerSpawnedSound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

        private void RegisterEventListeners()
        {
            if (onBulletHitSound != null && onBulletHitSound.Length > 0)
            {
                Channel.BulletHit.Fired += OnBulletHit;
            }

            if (onBulletMissedSound != null && onBulletMissedSound.Length > 0)
            {
                Channel.BulletMissed.Fired += OnBulletMissed;
            }

            if (onBulletSpawnedSound != null && onBulletSpawnedSound.Length > 0)
            {
                Channel.BulletSpawned.Fired += OnBulletSpawned;
            }

            if (onChatMessageReceivedSound != null && onChatMessageReceivedSound.Length > 0)
            {
                Channel.ChatMessageReceived.Fired += OnChatMessageReceived;
            }

            if (onGameScoreSound != null && onGameScoreSound.Length > 0)
            {
                Channel.GameScore.Fired += OnGameScore;
            }

            if (onGameStartedSound != null && onGameStartedSound.Length > 0)
            {
                Channel.GameStarted.Fired += OnGameStarted;
            }

            if (onPlayerDiedSound != null && onPlayerDiedSound.Length > 0)
            {
                Channel.PlayerDied.Fired += OnPlayerDied;
            }

            if (onPlayerHealthSound != null && onPlayerHealthSound.Length > 0)
            {
                Channel.PlayerHealth.Fired += OnPlayerHealth;
            }

            if (onPlayerHitSound != null && onPlayerHitSound.Length > 0)
            {
                Channel.PlayerHit.Fired += OnPlayerHit;
            }

            if (onPlayerMoveInputSound != null && onPlayerMoveInputSound.Length > 0)
            {
                Channel.PlayerMoveInput.Fired += OnPlayerMoveInput;
            }

            if (onPlayerSpawnedSound != null && onPlayerSpawnedSound.Length > 0)
            {
                Channel.PlayerSpawned.Fired += OnPlayerSpawned;
            }
        }

        private void UnregisterEventListeners()
        {
            if (onBulletHitSound != null && onBulletHitSound.Length > 0)
            {
                Channel.BulletHit.Fired -= OnBulletHit;
            }

            if (onBulletMissedSound != null && onBulletMissedSound.Length > 0)
            {
                Channel.BulletMissed.Fired -= OnBulletMissed;
            }

            if (onBulletSpawnedSound != null && onBulletSpawnedSound.Length > 0)
            {
                Channel.BulletSpawned.Fired -= OnBulletSpawned;
            }

            if (onChatMessageReceivedSound != null && onChatMessageReceivedSound.Length > 0)
            {
                Channel.ChatMessageReceived.Fired -= OnChatMessageReceived;
            }

            if (onGameScoreSound != null && onGameScoreSound.Length > 0)
            {
                Channel.GameScore.Fired -= OnGameScore;
            }

            if (onGameStartedSound != null && onGameStartedSound.Length > 0)
            {
                Channel.GameStarted.Fired -= OnGameStarted;
            }

            if (onPlayerDiedSound != null && onPlayerDiedSound.Length > 0)
            {
                Channel.PlayerDied.Fired -= OnPlayerDied;
            }

            if (onPlayerHealthSound != null && onPlayerHealthSound.Length > 0)
            {
                Channel.PlayerHealth.Fired -= OnPlayerHealth;
            }

            if (onPlayerHitSound != null && onPlayerHitSound.Length > 0)
            {
                Channel.PlayerHit.Fired -= OnPlayerHit;
            }

            if (onPlayerMoveInputSound != null && onPlayerMoveInputSound.Length > 0)
            {
                Channel.PlayerMoveInput.Fired -= OnPlayerMoveInput;
            }

            if (onPlayerSpawnedSound != null && onPlayerSpawnedSound.Length > 0)
            {
                Channel.PlayerSpawned.Fired -= OnPlayerSpawned;
            }
        }
    }
}