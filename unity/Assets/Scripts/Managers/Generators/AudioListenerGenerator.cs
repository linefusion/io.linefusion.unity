#if SOURCE_GENERATOR

{{-
func get_attr(type, name)
  for attr in type.Attributes
    if attr.FullName == name
      ret attr
    end
  end
  ret null 
end 

func get_events()
  $events = []
  for struct in data.Structs
    attr = get_attr struct "MyProject.Events.EventAttribute"
    if attr == null
      continue
    end
    $events = Array.Add $events struct
  end
  ret $events | Array.Sort "FullName"
end

events = get_events
-}}

{{~ capture output ~}}
/// <auto-generated />

using System;
using UnityEngine;
using UnityEngine.Events;
using MyProject.Events;

namespace MyProject.Managers
{
    public partial class AudioManager
    {
{{~ for event in events ~}}
        [SerializeField]
        private AudioSource[] on{{ event.Name }}Sound;

        private void On{{ event.Name }}(Event<{{ event.FullName }}>.Args args)
        {
            var source = on{{ event.Name }}Sound[UnityEngine.Random.Range(0, on{{ event.Name }}Sound.Length - 1)];
            if (args.IsPositional)
                Play(source, args.Position);
            else
                Play(source);
        }

{{~ end -}}

        private void RegisterEventListeners()
        {
{{~ for event in events ~}}
            if (on{{ event.Name }}Sound != null && on{{ event.Name }}Sound.Length > 0)
            {
                Channel.{{ event.Name }}.Fired += On{{ event.Name }};
            }
{{~ end ~}}
        }

        private void UnregisterEventListeners()
        {
{{~ for event in events ~}}
            if (on{{ event.Name }}Sound != null && on{{ event.Name }}Sound.Length > 0)
            {
                Channel.{{ event.Name }}.Fired -= On{{ event.Name }};
            }
{{~ end ~}}
        }
    }
}

{{~ end ~}}
{{~ Save(output, "../AudioManagerExtras.cs") ~}}
#endif
